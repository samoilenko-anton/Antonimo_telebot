from telegram import Update

import requests

import random
import os
import json

from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from datetime import datetime

from keep_alive import keep_alive
from data.data_handler import get_user_response, store_user_response

from predefined_lists.motivation_list import motivation_quotes 
from predefined_lists.universal_houses_list import universal_houses
from predefined_lists.daily_horoscope_list import daily_horoscopes
from predefined_lists.artem_personality_list import artem_personalities
from predefined_lists.pseudo_job_list import pseudo_jobs
from predefined_lists.creature_list import creatures

from chat_games.guess_game import (
    start_guess, guess, guess_leaders, reset_guess, guess_me
)
from chat_games.daily_loot_game import daily_loot, loot_me, loot_top

from chat_games.ban_game import ban, ban_top

from chat_games.fake_slot_game import slot_custom

from chat_games.politics_game import porokhobot

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# random seed (day)
def get_random_today(user_id):
    today_seed = int(datetime.now().strftime("%Y%m%d"))
    return user_id + today_seed

# Function to generate a humorous "Anton-level" response based on random percentage and units
def generate_response(user_id):
    random.seed(get_random_today(user_id))
    percent = random.randint(0, 100)
    scale_type = random.choice([
        "%", "–∑ 10", "–∑ 5", "–∑ 7 –ê–Ω—Ç–æ–Ω—ñ–≤", "–ª—é—Ç–æ–ê–Ω—Ç–æ–Ω—ñ–≤", "–≤—ñ—Ç–∞–º—ñ–Ω—ñ–≤ –ê",
        "–Ω–∞ –æ–∫–æ", "–¥–∂–æ—É–ª—ñ–≤ –ê–Ω—Ç–æ–Ω–∞"
    ])
    
    # based on percent only
    base_templates = [
        f"–¢–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –ê–Ω—Ç–æ–Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ‚Äî {percent}%",
        f"–ó–∞ —à–∫–∞–ª–æ—é –ê–Ω—Ç–æ–Ω—ñ—á–Ω–æ—Å—Ç—ñ —Ç–∏ –Ω–∞ {percent}%", f"–¢–∏ –ê–Ω—Ç–æ–Ω –Ω–∞ {percent}%.",
        f"–ê–Ω—Ç–æ–Ω–Ω—ñ—Å—Ç—å —É —Ç–≤–æ—ó–π –∫—Ä–æ–≤—ñ ‚Äî {percent}%",
        f"–ó–∞—Ä–∞–∑ —É —Ç–æ–±—ñ –ø—Ä–∏–±–ª–∏–∑–Ω–æ {percent} –æ–¥–∏–Ω–∏—Ü—å –ê–Ω—Ç–æ–Ω–∞.",
        f"–°–∫–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ê–Ω—Ç–æ–Ω–Ω—ñ—Å—Ç—å: {percent}%",
        f"–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –ê–Ω—Ç–æ–Ω –Ω–∞ {percent}%, —â–æ –¥–æ—Å–∏—Ç—å –Ω–µ–ø–æ–≥–∞–Ω–æ.",
        f"–ê–Ω—Ç–æ–Ω—ñ—á–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞: {percent}%",
        f"–†—ñ–≤–µ–Ω—å –ê–Ω—Ç–æ–Ω–∞: {percent}%. –ó–∞–Ω–æ—Ç–æ–≤–∞–Ω–æ.",
        f"{percent}% ‚Äî —Å–∞–º–µ —Å—Ç—ñ–ª—å–∫–∏ –ê–Ω—Ç–æ–Ω–∞ –≤ —Ç–æ–±—ñ –Ω–∞ –∑–∞—Ä–∞–∑."
    ]

    # scale the number
    scaled_templates = [
        f"–ó–∞ —à–∫–∞–ª–æ—é –≤—ñ–¥ 0 –¥–æ 10: {round(percent / 10, 1)} –ê–Ω—Ç–æ–Ω–∞.",
        f"–¶–µ {round(percent / 20, 1)} –∑ 5 –ê–Ω—Ç–æ–Ω—ñ–≤.",
        f"–¢–∏ ‚Äî {round(percent / 14.3, 1)} –∑ 7 –ê–Ω—Ç–æ–Ω—ñ–≤. –ú–∞–π–∂–µ –ª—ñ–º—ñ—Ç.",
        f"{round(percent / 2, 1)} –ª—é—Ç–æ–ê–Ω—Ç–æ–Ω—ñ–≤. –û–±–µ—Ä–µ–∂–Ω–æ!",
        f"{round(percent / 4.2, 1)} –≤—ñ—Ç–∞–º—ñ–Ω—ñ–≤ A. –ú–µ–¥–∏–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–∞–ª–∏.",
        f"–°–∫–ª–∞–¥–Ω–æ —Å–∫–∞–∑–∞—Ç–∏ —Ç–æ—á–Ω–æ, –∞–ª–µ –¥–µ—Å—å {percent * 7} –¥–∂–æ—É–ª—ñ–≤ –ê–Ω—Ç–æ–Ω–∞.",
        f"–ù–∞ –æ–∫–æ ‚Äî –¥–µ—Å—å {percent}%. –ê–ª–µ —è –∂ –Ω–µ –æ—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥.",
        f"–ì—Ä—É–±–∞ –æ—Ü—ñ–Ω–∫–∞: {round(percent / 100, 2)} –Ω–∞ —à–∫–∞–ª—ñ –ê–Ω—Ç–æ–Ω—ñ–≤.",
        f"–¶–µ —Ä—ñ–≤–µ–Ω—å {round(percent / 3.3, 1)} –∑ 30 –∞–Ω—Ç–æ–Ω–Ω–∏—Ö –±–∞–ª—ñ–≤.",
        f"–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {round(percent / 1.25, 1)} –ê–Ω—Ç–æ–Ω-—Ä–µ–π—Ç–∏–Ω–≥—É –∑ 80."
    ]

    # when 0%
    zero_responses = [
        "ü§ñ –ê–Ω—Ç–æ–Ω–Ω—ñ—Å—Ç—å –Ω–µ –≤–∏—è–≤–ª–µ–Ω–∞. –¢–∏ —á–∏—Å—Ç–∏–π NPC.", "üìâ 0%. –¶–µ —Ñ—ñ–∞—Å–∫–æ, –±—Ä–∞—Ç–∞–Ω.",
        "üíÄ –ù–µ –ê–Ω—Ç–æ–Ω. –ù–µ —Å—å–æ–≥–æ–¥–Ω—ñ. –ù–µ –Ω—ñ–∫–æ–ª–∏.",
        "üëΩ –¢–∏ –±—ñ–ª—å—à–µ —Å—Ö–æ–∂–∏–π –Ω–∞ –†—ñ—á–∞—Ä–¥–∞.", "ü•∂ –ù—É–ª—å. –•—ñ–±–∞ —Ü–µ –º–æ–∂–ª–∏–≤–æ?",
        "üòí 0. –¢–∏ –Ω–∞–≤—ñ—Ç—å –Ω–µ –ê–Ω—Ç–æ–Ω-–º—ñ–Ω—É—Å.", "üö´ –¢–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –±–µ–∑ –ê–Ω—Ç–æ–Ω–∞. –°—É–≤–æ—Ä–æ.",
        "üß± –¢–≤–æ—è –ê–Ω—Ç–æ–Ω–Ω—ñ—Å—Ç—å —Ç–∞–∫–∞ –∂ –º–µ—Ä—Ç–≤–∞, —è–∫ —Ü–µ–π –±–µ—Ç–æ–Ω.",
        "üí§ –¢–∏ —Å—å–æ–≥–æ–¥–Ω—ñ Artem_list[Anton_index]",
        "üï≥Ô∏è –ù—ñ—á–æ–≥–æ. –ü–æ—Ä–æ–∂–Ω–µ—á–∞. –ù–µ –ê–Ω—Ç–æ–Ω."
    ]

    # when 100%
    full_responses = [
        "üíØ –ê–±—Å–æ–ª—é—Ç–Ω–∞ –ê–Ω—Ç–æ–Ω—ñ—á–Ω—ñ—Å—Ç—å. –£ —Ç–µ–±–µ –Ω–∞–≤—ñ—Ç—å –ø–∞—Å–ø–æ—Ä—Ç —Å–≤—ñ—Ç–∏—Ç—å—Å—è.",
        "üåã 100%. –°–ø—Ä–∞–≤–∂–Ω—ñ–π –ê–Ω—Ç–æ–Ω-–ø–µ—Ä–≤–æ—Å—É—Ç–Ω—ñ—Å—Ç—å.",
        "üèÜ –£–≤—ñ–π—à–æ–≤ –¥–æ –ó–∞–ª–∏ –ê–Ω—Ç–æ–Ω—ñ–≤ –í—ñ—á–Ω–æ—Å—Ç—ñ.",
        "üß¨ –£ —Ç–≤–æ—ó—Ö –≥–µ–Ω–∞—Ö –∑–∞–º—ñ—Å—Ç—å –î–ù–ö ‚Äî –ê–ù–¢.",
        "ü¶æ –¶–µ –±—É–ª–∞ —ñ–¥–µ–∞–ª—å–Ω–∞ –ê–Ω—Ç–æ–Ω–Ω–∞ —Ö–≤–∏–ª—è.",
        "ü•á –¢–∏ ‚Äî –µ—Ç–∞–ª–æ–Ω –ê–Ω—Ç–æ–Ω–∞. –ù–∞–≤—ñ—Ç—å Google –ø—ñ–¥—Ç—è–≥—É—î—Ç—å—Å—è –¥–æ —Ç–µ–±–µ.",
        "üß† –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ê–Ω—Ç–æ–Ω-–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ñ—Å—Ç—å –¥–æ—Å—è–≥–Ω—É—Ç–∞.",
        "üéñÔ∏è –¢–æ–±—ñ –≤–∞—Ä—Ç–æ –¥–∞—Ç–∏ –ê–Ω—Ç–æ–Ω-–ú–µ–¥–∞–ª—å.",
        "üì° –ê–Ω—Ç–æ–Ω-—Å–∏–≥–Ω–∞–ª —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π. –ü–æ–≤–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è.",
        "üî• –¢–∏ –ê–Ω—Ç–æ–Ω –Ω–∞—Å—Ç—ñ–ª—å–∫–∏, —â–æ –≤–∂–µ –ø–∞–ª–∏—à –ø–æ–≤—ñ—Ç—Ä—è –Ω–∞–≤–∫–æ–ª–æ."
    ]

    mid_bonus = {
        # 80% -- 100%
        range(80, 100): [
            "üî• –ê–Ω—Ç–æ–Ω–Ω—ñ—Å—Ç—å –∑–∞—à–∫–∞–ª—é—î. –¢–∏ –º–∞–π–∂–µ –≤–∏—Å—Ç—Ä—ñ–ª–∏–≤ –ª–∞–∑–µ—Ä–æ–º —ñ–∑ —á–æ–ª–∞.",
            "üß≤ –ü—Ä–∏–≤–∞–±–ª—é—î—à —ñ–Ω—à–∏—Ö –ê–Ω—Ç–æ–Ω—ñ–≤ —Å–≤–æ—î—é –µ–Ω–µ—Ä–≥—ñ—î—é.",
            "üå† –ê–Ω—Ç–æ–Ω-—Ä–µ–∑–æ–Ω–∞–Ω—Å –Ω–∞ –≤–∏—Å–æ–∫—ñ–π —á–∞—Å—Ç–æ—Ç—ñ.",
            "‚ö°Ô∏è –¢–≤—ñ–π –ê–Ω—Ç–æ–Ω-—ñ–º–ø—É–ª—å—Å –º–∞–π–∂–µ –∑—ñ—Ä–≤–∞–≤ —Å–∫–∞–Ω–µ—Ä.",
            "üõ°Ô∏è –°—Ç–∞–±—ñ–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞ –ê–Ω—Ç–æ–Ω–∞.", "üîã –ó–∞—Ä—è–¥ –ê–Ω—Ç–æ–Ω–∞ 80%+. –¢–∏ –≥–æ—Ç–æ–≤–∏–π.",
            "ü¶Å –¶–µ –ø–æ—Ç—É–∂–Ω–æ. –ì–æ—Ä–¥–∏–π –ê–Ω—Ç–æ–Ω!",
            "üí• –í–∏–±—É—Ö–æ–≤–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –ê–Ω—Ç–æ–Ω—ñ—á–Ω–æ—Å—Ç—ñ.",
            "üìà –ì—Ä–∞—Ñ—ñ–∫ –ê–Ω—Ç–æ–Ω–Ω–æ—Å—Ç—ñ —Ä–≤–µ –≤–µ—Ä—Ö–Ω—é –º–µ–∂—É.",
            "üéØ –í–ª—É—á–Ω–æ! –¶–µ –º–∞–π–∂–µ –ø–æ–≤–Ω–∏–π –ê–Ω—Ç–æ–Ω."
        ],
        # 60% -- 80%
        range(60, 80): [
            "üòé –ù–µ–ø–æ–≥–∞–Ω–æ. –ú–æ–∂–Ω–∞ –Ω–∞–≤—ñ—Ç—å —Å–∫–∞–∑–∞—Ç–∏ ‚Äî –ê–Ω—Ç–æ–Ω-–∫–ª–∞—Å—ñ–∫.",
            "üß• –¢—Ä–∏–º–∞–π—Å—è, –ê–Ω—Ç–æ–Ω–µ. –í —Ç–µ–±–µ –≤—Å–µ –ø—ñ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.",
            "üé© –ê–Ω—Ç–æ–Ω-—Å—Ç–∏–ª—å –Ω–∞ –º—ñ—Å—Ü—ñ.", "ü™û –°—Ç–∞–±—ñ–ª—å–Ω–∞ –ê–Ω—Ç–æ–Ω–Ω–∞ —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ—Å—Ç—å.",
            "üß≠ –í–ø–µ–≤–Ω–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º –ê–Ω—Ç–æ–Ω—ñ–∑–∞—Ü—ñ—ó.",
            "üìè –¶–µ –ø—Ä—è–º–æ –ø–æ –ª—ñ–Ω—ñ–π—Ü—ñ ‚Äî —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–∏–π –ê–Ω—Ç–æ–Ω.",
            "ü™∂ –õ–µ–≥–∫–∏–π, –∞–ª–µ –≤—ñ–¥—á—É—Ç–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –ê–Ω—Ç–æ–Ω–Ω–æ—ó –≥—Ä–∞—Ü—ñ—ó.",
            "ü´° –ê–Ω—Ç–æ–Ω–Ω—ñ—Å—Ç—å –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–æ–≤–∞–Ω–∞.",
            "üìö –ó—Ä–∞–∑–∫–æ–≤–∏–π –ê–Ω—Ç–æ–Ω. –ü—Ä—è–º–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó.",
            "üöó –°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å ‚Äî –∞–ª–µ –≤—ñ—Ä–Ω–∏–π —à–ª—è—Ö."
        ],
        # 40% -- 60%
        range(40, 60): [
            "ü§î –°–µ—Ä–µ–¥–Ω—å–æ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏–π –ê–Ω—Ç–æ–Ω. –ê–ª–µ –∑—ñ —Å–≤–æ—ó–º —à–∞—Ä–º–æ–º.",
            "‚öñÔ∏è –ë–∞–ª–∞–Ω—Å –ê–Ω—Ç–æ–Ω–∞ –≤–∏—Ç—Ä–∏–º–∞–Ω–æ.",
            "üõãÔ∏è –¢–∏ —è–∫ –ê–Ω—Ç–æ–Ω –ø—ñ—Å–ª—è –æ–±—ñ–¥—É ‚Äî —Å–ø–æ–∫—ñ–π–Ω–∏–π —ñ –Ω–µ–≤–∏–±—É—Ö–æ–≤–∏–π.",
            "üìé –§–æ—Ä–º–∞–ª—å–Ω–æ –ê–Ω—Ç–æ–Ω. –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî —â–µ –ø–æ–¥—É–º–∞—î–º–æ.",
            "üîç –¢—Ä–æ—Ö–∏ –ê–Ω—Ç–æ–Ω, —Ç—Ä–æ—Ö–∏ –∑–∞–≥–∞–¥–∫–∞.",
            "üå¶Ô∏è –ú—ñ–Ω–ª–∏–≤–∞ –ê–Ω—Ç–æ–Ω—ñ—á–Ω—ñ—Å—Ç—å. –ê–ª–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ.",
            "ü•¢ –ü–∞—Ä–∞ –ê–Ω—Ç–æ–Ω—ñ–≤ –≤ —Ç–æ–±—ñ —î.", "üßÉ –ê–Ω—Ç–æ–Ω –Ω–∞ —Ä–æ–∑–≤–µ–¥–µ–Ω–Ω—è.",
            "üß∏ –¢–µ–ø–ª–æ, –º‚Äô—è–∫–æ, —Å–ø–æ–∫—ñ–π–Ω–æ. –ê–Ω—Ç–æ–Ω-–º—ñ–¥—ñ—É–º.",
            "üñºÔ∏è –¢–∏ ‚Äî –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ê–Ω—Ç–æ–Ω–∞."
        ],
        # 20% -- 40%
        range(20, 40): [
            "üòê –ú–∞–ª–æ–≤–∞—Ç–æ. –ê–ª–µ –∂ –ê–Ω—Ç–æ–Ω ‚Äî —Ü–µ –Ω–µ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∞.",
            "ü´• –ê–Ω—Ç–æ–Ω –¥–µ—Å—å –ø–æ—Ä—É—á, –∞–ª–µ —â–µ –Ω–µ –≤ —Ç–æ–±—ñ.",
            "üìâ –¢–∏ –Ω–∞ —Å–ø–∞–¥—ñ –ê–Ω—Ç–æ–Ω–Ω–æ–≥–æ —Ç–∏—Å–∫—É.",
            "ü™´ –°–ª–∞–±–∞ –∑–∞—Ä—è–¥–∫–∞. –ê–Ω—Ç–æ–Ω–∞ –±—Ä–∞–∫—É—î.",
            "üåë –ù–∏–∑—å–∫–∞ —Ñ–∞–∑–∞ –ê–Ω—Ç–æ–Ω–∞. –ê–ª–µ –∫–æ–ª–∏—Å—å –ø—ñ–¥–µ –≤–≥–æ—Ä—É.",
            "üö∂ –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞–¥—ñ—è –ê–Ω—Ç–æ–Ω–Ω–æ—Å—Ç—ñ.",
            "üßä –©–µ –Ω–µ —Ä–æ–∑—Ç–∞–Ω—É–≤ –¥–æ —Ä—ñ–≤–Ω—è –ê–Ω—Ç–æ–Ω–∞.",
            "üå± –¢—ñ–ª—å–∫–∏ –ø—Ä–æ—Ä–æ—Å—Ç–∞—î —Ç–≤–æ—è –ê–Ω—Ç–æ–Ω—ñ—á–Ω–∞ —Å—É—Ç–Ω—ñ—Å—Ç—å.",
            "üß∫ –°—Ö–æ–∂–µ, –ê–Ω—Ç–æ–Ω–∞ –∑–∞–ª–∏—à–∏–ª–∏ –≤ –ø—Ä–∞–Ω–Ω—ñ.",
            "üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ê–Ω—Ç–æ–Ω-—Å–µ—Ä–≤–µ—Ä—É —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–µ."
        ],
        # 1% -- 20%
        range(1, 20): [
            "ü´† –î—É–∂–µ –Ω–∏–∑—å–∫–∞ –ê–Ω—Ç–æ–Ω—ñ—á–Ω—ñ—Å—Ç—å. –í–∞—Ä—Ç–æ —Å—Ö–æ–¥–∏—Ç–∏ –≤ —Ü–µ—Ä–∫–≤—É.",
            "üï≥Ô∏è –õ–µ–¥—å –≤–ª–æ–≤–∏–º–∏–π –Ω–∞—Ç—è–∫ –Ω–∞ –ê–Ω—Ç–æ–Ω–∞.", "üì¥ –ê–Ω—Ç–æ–Ω —É —Å–ø–ª—è—á–æ–º—É —Ä–µ–∂–∏–º—ñ.",
            "üöΩ –ê–Ω—Ç–æ–Ω –≤—Ç—ñ–∫ —É –∫–∞–Ω–∞–ª—ñ–∑–∞—Ü—ñ—é.", "üòµ‚Äçüí´ –°—Ç–∞–Ω ‚Äî –ê–Ω—Ç–æ–Ω–Ω–∏–π —Ç—É–º–∞–Ω.",
            "üìâ –¶–µ –º–∞–π–∂–µ –ø—Ä–æ–≤–∞–ª.", "üï∑Ô∏è –¢–∏ —Å—Ö–æ–∂–∏–π –Ω–∞ –ê–Ω—Ç–æ–Ω–∞ –ª–∏—à–µ —É —Å–Ω—ñ.",
            "üß® –ê–Ω—Ç–æ–Ω —Ä–æ–∑—á–∏–Ω–∏–≤—Å—è –≤ –ø–æ–≤—ñ—Ç—Ä—ñ.",
            "üå´Ô∏è –¢—É–º–∞–Ω–Ω–æ. –ê–ª–µ —Ü–µ —Ç–æ—á–Ω–æ –Ω–µ –ê–Ω—Ç–æ–Ω.",
            "üì¶ –ê–Ω—Ç–æ–Ω –∑–∞–≥—É–±–∏–≤—Å—è –Ω–∞ —Å–∫–ª–∞–¥—ñ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ."
        ]
    }

    if percent == 0:
        response = f"{random.choice(zero_responses)}"
    elif percent == 100:
        response = f"{random.choice(full_responses)}"
    elif scale_type == "%":
        base = random.choice(base_templates)
        for rng, msg in mid_bonus.items():
            if percent in rng:
                response = f"{base} {msg}"
        response = base
    else:
        response = random.choice(scaled_templates)

    return response

# Assigns a Artem-personality description (random, based on user_id)
def get_artem_personality(user_id: int) -> str:
    random.seed(get_random_today(user_id))
    return random.choice(artem_personalities)

# Daily horoscope message (random, based on user_id)
def get_daily_horoscope(user_id: int) -> str:
    random.seed(get_random_today(user_id))
    return random.choice(daily_horoscopes)

# Assigns a daily 'house' identity (random, based on user_id)
def get_daily_user_house(user_id: int) -> str:
    random.seed(get_random_today(user_id))
    return random.choice(universal_houses)

# /anton_percent
async def anton_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user_id = update.effective_user.id
    user_name = update.effective_user.first_name

    saved = get_user_response(user_id)
    if saved:
        await update.message.reply_text(saved)
        return

    new_response = user_name + ", " + generate_response(user_id)
    store_user_response(user_id, new_response)
    await update.message.reply_text(new_response)

# /what_artem
async def what_artem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    personality = get_artem_personality(user_id)

    await update.message.reply_text(
        f"{user_name}, —Ç–≤–æ—è –ê—Ä—Ç–µ–º-–æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å:\n\n{personality}")

# /daily_horoscope
async def daily_horoscope(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    text = get_daily_horoscope(user_id)

    await update.message.reply_text(f"üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {user_name}:\n\n{text}")

async def daily_house(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    house = get_daily_user_house(user_id)

    await update.message.reply_text(
        f"üèõÔ∏è {user_name}, —Ç–≤—ñ–π –±—É–¥–∏–Ω–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ \n\n{house}")

# /ask_ai_freak
async def ask_ai_freak(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = " ".join(context.args)
    
    if not user_input:
        await update.message.reply_text(
            "[AI] –ù–∞–ø–∏—à–∏ —â–æ—Å—å –ø—ñ—Å–ª—è /ask_ai_freak, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º üí¨")
        return

    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "HTTP-Referer": "antonimo-bot.telebot",
            "X-Title": "Antonimo"
        }

        data = {
            "model":
            "mistralai/mistral-7b-instruct",
            "messages": [
                {"role": "system", "content": "–¢–∏ ‚Äî –¥—Ä—É–∂–Ω—ñ–π –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫."},
                {"role": "user", "content": user_input}
            ]
            
        }

        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=data)

        result = response.json()

        # err message
        if "choices" not in result:
            await update.message.reply_text(
                f"‚ùå OpenRouter –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ:\n{result}")
            return

        reply = result['choices'][0]['message']['content']
        await update.message.reply_text(reply)

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è Exception –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É: {str(e)}")

# /coinflip ‚Äî random 50/50
async def coinflip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name
    result = random.choice([
        "ü™ô –û—Ä–µ–ª. –¶–µ –∑–Ω–∞–∫ ‚Äî —Ä–∏–∑–∏–∫—É–π!",
        "ü™ô –†–µ—à–∫–∞. –ö—Ä–∞—â–µ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ –ø–æ—Å–ø—ñ—à–∞—Ç–∏."
    ])
    await update.message.reply_text(f"{user_name}, —Ç–≤—ñ–π –∫–∏–¥–æ–∫ –º–æ–Ω–µ—Ç–∏: {result}")

# /motivation ‚Äî light ironic motivational quotes
async def motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name
    quote = random.choice(motivation_quotes)
    await update.message.reply_text(f"{user_name}, —Ç–≤–æ—è –º–æ—Ç–∏–≤–∞—Ü—ñ—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n{quote}")

# /pseudo_job
async def pseudo_job(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed(get_random_today(update.effective_user.id))
    job = random.choice(pseudo_jobs)
    await update.message.reply_text(f"üëî –¢–≤–æ—è –ø—Ä–æ—Ñ–µ—Å—ñ—è –¥–Ω—è: {job}")
    
# /which_creature
async def which_creature(update: Update, context: ContextTypes.DEFAULT_TYPE):
    random.seed(get_random_today(update.effective_user.id))
    creature = random.choice(creatures)
    await update.message.reply_text(f"üêæ –°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ ‚Äî {creature}.")

# /slot
def dice_slot_filter(update):
    return update.message.dice is not None and update.message.dice.emoji == "üé∞"
dice_filter = filters.MessageFilter(dice_slot_filter)

# logic
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("anton_percent", anton_percent))
app.add_handler(CommandHandler("what_artem", what_artem))
app.add_handler(CommandHandler("daily_horoscope", daily_horoscope))
app.add_handler(CommandHandler("daily_house", daily_house))
app.add_handler(CommandHandler("ask_ai_freak", ask_ai_freak))
app.add_handler(CommandHandler("coinflip", coinflip))
app.add_handler(CommandHandler("motivation", motivation))
app.add_handler(CommandHandler("pseudo_job", pseudo_job))
app.add_handler(CommandHandler("which_creature", which_creature))

app.add_handler(CommandHandler("start_guess", start_guess))
app.add_handler(CommandHandler("guess", guess))
app.add_handler(CommandHandler("guess_leaders", guess_leaders))
app.add_handler(CommandHandler("guess_me", guess_me))
app.add_handler(CommandHandler("reset_guess", reset_guess))

app.add_handler(CommandHandler("daily_loot", daily_loot))
app.add_handler(CommandHandler("loot_me", loot_me))
app.add_handler(CommandHandler("loot_top", loot_top))

app.add_handler(CommandHandler("ban", ban))
app.add_handler(CommandHandler("ban_top", ban_top))

app.add_handler(CommandHandler("slot", slot_custom))

app.add_handler(CommandHandler("porokhobot", porokhobot))

keep_alive()  # start and keep the bot alive
app.run_polling()
