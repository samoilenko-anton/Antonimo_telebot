import json
import random

# game data 
guess_game_data = {}

try:
    with open("data/guess_data.json", "r", encoding="utf-8") as f:
        guess_game_data = json.load(f)
        guess_game_data = {int(chat_id): {int(uid): data for uid, data in chat.items()} for chat_id, chat in guess_game_data.items()}
except FileNotFoundError:
    guess_game_data = {}

# guess game data (save)
def save_guess_data():
    with open("data/guess_data.json", "w", encoding="utf-8") as f:
        json.dump(guess_game_data, f, ensure_ascii=False, indent=2)

# /start_guess
async def start_guess(update, context):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name

    if chat_id not in guess_game_data:
        guess_game_data[chat_id] = {}

    guess_game_data[chat_id][user_id] = {
        "number": random.randint(1, 100),
        "attempts": 0,
        "total_games": guess_game_data[chat_id].get(user_id, {}).get("total_games", 0),
        "total_attempts": guess_game_data[chat_id].get(user_id, {}).get("total_attempts", 0),
        "name": user_name
    }
    save_guess_data()
    await update.message.reply_text("üéØ –Ø –∑–∞–≥–∞–¥–∞–≤ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100. –í–≥–∞–¥–∞–π –π–æ–≥–æ —á–µ—Ä–µ–∑ /guess <—á–∏—Å–ª–æ>!")

# /guess <number>
async def guess(update, context):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name

    if chat_id not in guess_game_data or user_id not in guess_game_data[chat_id] or "number" not in guess_game_data[chat_id][user_id]:
        await update.message.reply_text("‚ùó –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å—Ç–∏ –≥—Ä—É —á–µ—Ä–µ–∑ /start_guess")
        return

    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–í–∫–∞–∂–∏ —á–∏—Å–ª–æ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /guess 42")
        return

    guess = int(context.args[0])
    data = guess_game_data[chat_id][user_id]
    data["attempts"] += 1
    data["name"] = user_name
    target = data["number"]

    if guess < target:
        await update.message.reply_text("üîª –ú–æ—î —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ")
    elif guess > target:
        await update.message.reply_text("üî∫ –ú–æ—î —á–∏—Å–ª–æ –º–µ–Ω—à–µ")
    else:
        attempts = data["attempts"]
        data["total_games"] += 1
        data["total_attempts"] += attempts
        avg = data["total_attempts"] / data["total_games"]
        await update.message.reply_text(f"‚úÖ –í–≥–∞–¥–∞–≤ –∑–∞ {attempts} —Å–ø—Ä–æ–±!")
        await update.message.reply_text(f"üìä –¢–≤–æ—è —Å–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±: {avg:.2f}")
        del data["number"]
        del data["attempts"]
        save_guess_data()

# /guess_leaders ‚Äî top 25
async def guess_leaders(update, context):
    chat_id = update.effective_chat.id
    chat_data = guess_game_data.get(chat_id, {})

    leaders = [
        (uid, d["name"], d["total_games"], d["total_attempts"], d["total_attempts"] / d["total_games"])
        for uid, d in chat_data.items()
        if d.get("total_games", 0) >= 1
    ]
    leaders.sort(key=lambda x: x[4])
    top25 = leaders[:25]
    if not top25:
        await update.message.reply_text("üìâ –©–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –≥—Ä–∞–≤ —É —Ü—å–æ–º—É —á–∞—Ç—ñ.")
        return
    text = "üèÜ –¢–æ–ø-5 –≥—Ä–∞–≤—Ü—ñ–≤ —Ü—å–æ–≥–æ —á–∞—Ç—É –∑–∞ —Ç–æ—á–Ω—ñ—Å—Ç—é (–º–µ–Ω—à–µ ‚Äî –∫—Ä–∞—â–µ):\n"
    for i, (uid, name, games, attempts, avg) in enumerate(top25, 1):
        text += f"{i}. {name} ‚Äî {games} —ñ–≥–æ—Ä, {attempts} —Å–ø—Ä–æ–±, —Å–µ—Ä–µ–¥–Ω—î {avg:.2f}\n"
    await update.message.reply_text(text)

# /reset_guess
async def reset_guess(update, context):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if chat_id in guess_game_data and user_id in guess_game_data[chat_id]:
        guess_game_data[chat_id][user_id] = {}
        save_guess_data()
        await update.message.reply_text("üîÑ –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–ª–∞ –æ–±–Ω—É–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text("–ù–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–Ω—è.")

# /guess_me
async def guess_me(update, context):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    data = guess_game_data.get(chat_id, {}).get(user_id)

    if not data or data.get("total_games", 0) == 0:
        await update.message.reply_text(f"{user_name}, —Ç–∏ —â–µ –Ω–µ –≥—Ä–∞–≤. –°–ø—Ä–æ–±—É–π /start_guess!")
        return

    avg = data["total_attempts"] / data["total_games"]
    await update.message.reply_text(
        f"üßæ –ü—Ä–æ—Ñ—ñ–ª—å {user_name}:\n–Ü–≥–æ—Ä: {data['total_games']}\n–°–ø—Ä–æ–±: {data['total_attempts']}\n–°–µ—Ä–µ–¥–Ω—î: {avg:.2f}"
    )
